#!/bin/sh
# -----------------------------------------------------------------------------
# clj  - Start Script for the Clojure interperter
# Shamelessly stolen from the Jruby startup script,
# jruby.sh. Also borrowed some code from Mark Reid's clj script
#
# Options:
# -debug Just print out the java cmd and exit. 
# -no-jline Don't use jline
# -no-contrib Don't use clojure-contrib
# -cp <jar or directory> Add the next argument to the classpath
# -classpath <jar or directory> Add the next argument to the classpath
# -Dname=value Define the given Java system property, passed directly to java.
# -Xjava-option Passed directly to Java
# -client Use the java client VM
# -server Use the java server VM
# -hotspot Turn on java hotspot
# -J java-option Pass the next argument directly to java.
# -- Treat everything that follows as a clojure argument
#
# clj will assume that any argument that it doesn't recognize is
# the start of the arguments for clojure. Thus 
#
#   clj my_clojure_file.clj -first_arg -second_arg
#
# Will run clojure_file.clj and pass the two args to it.
# 
# -----------------------------------------------------------------------------

# $1 is the argument name, and $2 is the number of arguments left.
arg_check() {
  if [ $2 -lt 2 ]; then
    error "$PRG_NAME: option requires an argument -- $1"
  fi
}

# Given a existing path in $1 and a new element in
# $2, print out a new path with $2 added to the end,
# using $3 as the delimiter. Deals correctly with $1
# being empty
add_to_path() {
  if [ -z "$1" ]; then
    echo $2
  elif [ -z "$2" ]; then
    echo $1
  else
    echo $1$3$2
  fi
} 

cygwin=false

# Identify the os we are running under
case "`uname`" in
  CYGWIN*) cygwin=true;;
esac

# Figure out where clojure is installed

PRG=$0
progname=`basename "$0"`

while [ -h "$PRG" ] ; do
  ls=`ls -ld "$PRG"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '.*/.*' > /dev/null; then
    if expr "$link" : '^/' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname ${PRG}`/${link}"
    fi
  else
    PRG="`dirname $PRG`/$link"
  fi
done

CLOJURE_HOME_1=`dirname "$PRG"`           # the ./bin dir
if [ "$CLOJURE_HOME_1" = '.' ] ; then
  cwd=`pwd`
  CLOJURE_HOME=`dirname $cwd` #
else
  CLOJURE_HOME=`dirname "$CLOJURE_HOME_1"`  # the . dir
fi

# Determine what we are going to use for java,
# either from JAVA_HOME or from the path

if [ -z "$JAVA_HOME" ] ; then
  JAVA_CMD='java'
else
  if $cygwin; then
    JAVA_HOME=`cygpath -u "$JAVA_HOME"`
  fi
  JAVA_CMD="$JAVA_HOME/bin/java"
fi

# Figure out where all the key jar files are

CLOJURE_CORE_LIB=$CLOJURE_HOME/cljlib
CLOJURE_LIB=$CLOJURE_HOME/lib

CLOJURE_JAR=$CLOJURE_CORE_LIB/clojure.jar
CLOJURE_CONTRIB_JAR=$CLOJURE_CORE_LIB/clojure-contrib.jar
JLINE_JAR=$CLOJURE_CORE_LIB/jline.jar

CP_DELIMITER=":"

# Pick up all the jar files in dejour/lib

LIB_DIR_CP="$CLOJURE_LIB"
for jarfile in `find "$CLOJURE_LIB" -name "*.jar"`; do
  LIB_DIR_CP=`add_to_path "$USER_CP" "$jarfile" $CP_DELIMITER`
done

# Process all the - flags that this script understands
# The loop below will shift away all but the args that
# should be passed to clojure itself

DEBUG_CMD=""
JAVA_ARGS=""
CLOJURE_ARGS=""

USE_JLINE=true
USE_CONTRIB=true
CLOJURE_MAIN_CLASS=clojure.main
CLOJURE_JLINE_CLASS=jline.ConsoleRunner

USER_CP=""
CORE_CP="$CLOJURE_JAR"

while [ $# -gt 0 ]
do
    case "$1" in
    -debug)
       DEBUG_CMD=echo
    ;;

    -cp)
       arg_check "$1" $#
       shift
       USER_CP=`add_to_path "$USER_CP" "$1" $CP_DELIMITER`
    ;;

    -classpath)
       arg_check "$1" $#
       shift
       USER_CP=`add_to_path "$USER_CP" "$1" $CP_DELIMITER`
    ;;

    -D*)
       JAVA_ARGS="$JAVA_ARGS $1"
    ;;

    -X*)
       JAVA_ARGS="$JAVA_ARGS $1"
    ;;

    -client)
       JAVA_ARGS="$JAVA_ARGS $1"
    ;;

    -server)
       JAVA_ARGS="$JAVA_ARGS $1"
    ;;

    -hotspot)
       JAVA_ARGS="$JAVA_ARGS $1"
    ;;

    -no-jline)
       USE_JLINE=false
    ;;

    -no-contrib)
       USE_CONTRIB=false
    ;;

    -repl-class)
       arg_check "$1" $#
       shift
       CLOJURE_MAIN_CLASS=$1
    ;;

    -J)
       arg_check "$1" $#
       shift
       JAVA_ARGS="$JAVA_ARGS $1"
    ;;

    --)
       arg_check "$1" $#
       shift
       break;
    ;;

    *)
       break;
    ;;
    esac
    shift
done

# If the user didn't specify -cp or -classpath,
# use the classpath env variable

if [ -z "$USER_CP" ]; then
  USER_CP="$CLASSPATH"
fi

# Do we want to use clojure contrib?

if $USE_CONTRIB; then
  CORE_CP=`add_to_path "$CORE_CP" "$CLOJURE_CONTRIB_JAR" $CP_DELIMITER`
fi

if $USE_JLINE; then
  CORE_CP=`add_to_path "$CORE_CP" "$JLINE_JAR" $CP_DELIMITER`
  CLOJURE_JLINE_CLASS=jline.ConsoleRunner
else
  CLOJURE_JLINE_CLASS=
fi

CLOJURE_CP="$CORE_CP"

CLOJURE_CP=`add_to_path "$CLOJURE_CP" "$LIB_DIR_CP" $CP_DELIMITER`

CLOJURE_CP=`add_to_path "$CLOJURE_CP" "$USER_CP" $CP_DELIMITER`


$DEBUG_CMD $JAVA_CMD -classpath $CLOJURE_CP $JAVA_ARGS $CLOJURE_JLINE_CLASS $CLOJURE_MAIN_CLASS "$@"



